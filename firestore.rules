rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Utility function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Allow authenticated users to read their own user profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Allow authenticated users to read and write their own workouts
    match /workouts/{workoutId} {
      allow read, write: if isAuthenticated() &&
          (resource == null || resource.data.userId == request.auth.uid);
    }

    // Group workouts with improved security - NOTICE THE UNDERSCORE HERE
    match /group_workouts/{workoutId} {
      // Only allow listing documents that include the user as a participant or creator
      allow list: if isAuthenticated() && (
        request.query.limit <= 50 && (
        exists(/databases/$(database)/documents/group_workouts/$(workoutId)) == false ||
          request.query.filters[0].fieldPath == "participants" &&
            request.query.filters[0].op == "array-contains" &&
            request.query.filters[0].value == request.auth.uid
      )
      );

      // Allow reading individual documents if user is a participant or creator
      allow get: if isAuthenticated() && (
        resource == null ||
          resource.data.creatorId == request.auth.uid ||
          request.auth.uid in resource.data.participants
      );

      // Allow creating new group workouts when creator is current user
      allow create: if isAuthenticated() &&
          request.resource.data.creatorId == request.auth.uid;

      // Allow updates if user is creator or participant
      allow update: if isAuthenticated() && (
        resource.data.creatorId == request.auth.uid ||
          request.auth.uid in resource.data.participants
      );
    }

    // Rest of your rules...
  }
}